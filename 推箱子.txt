import java.io.*;
import java.util.*;

public class Main{
    private static int count = 0;
    public static void main(String[] args){
//        Scanner in = new Scanner(System.in);
//        int N = in.nextInt(), M = in.nextInt();
//        in.nextLine();
//        char[][] test = new char[N][M];
//        for(int i=0;i<N;i++){
//            test[i] = in.nextLine().toCharArray();
//        }
//        in.close();
        int N = 4,M=4;
        char[][] test = {
                {'.','.','.','.'},
                {'.','.','*','@'},
                {'.','.','.','.'},
                {'.','X','.','.'},
        };
        System.out.print(getMinStep(test,N,M));
    }

    private static int targetRow,targetCol;
    private static int getMinStep(char[][] test,int N,int M) {
        int row=0,col=0;
        int flag[][] = new int[N][M];
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(test[i][j] == 'X'){row = i;col = j;};
                if(test[i][j] == '#') flag[i][j] = 1;
                if(test[i][j] == '@'){targetRow=i;targetCol = j;}
            }
        }
        if(row == 0 && col == 0 && test[row][col] !='X') return -1;//没有角色位置
//        if(step(test,N,M,row,col,flag)){
        flag[row][col]= 1;
        if(step(test,N,M,row,col,row-1,col,flag)
                ||step(test,N,M,row,col,row+1,col,flag)
                ||step(test,N,M,row,col,row,col-1,flag)
                ||step(test,N,M,row,col,row,col+1,flag)){
            return count;
        }else{
            return -1;
        }
    }
    private static boolean step(char[][] test, int N, int M, int lastRow, int lastCol, int row, int col, int[][] flag){
//        System.out.println("row:"+row+" col:"+col);
        if(row<0 || row>=N || col<0 || col>=M || test[row][col] == '#' || flag[row][col] == 1) {
//            System.out.println("走到障碍物或已经走过 false");
            return false;
        };//走到障碍物,或已经走过
        boolean box = false,dis = false;
        int nextRow = row+(row-lastRow);
        int nextCol = col+(col-lastCol);
        if(test[row][col] == '*'){//推箱子
            if(nextRow<0 || nextRow>=N || nextCol <0 || nextRow<N || test[nextRow][nextCol] == '#') {
//                System.out.println("箱子移不动 false");
                return false;
            }
            if(test[nextRow][nextCol] == '@'){
//                System.out.println("箱子移到目的地 true");
                return true;
            }
            test[nextRow][nextCol] = '*';
            box = true;
        }
        if(test[row][col] == '@') dis = true;
        count++;
        test[row][col]='X';
        if(lastRow == targetRow && lastCol == targetCol){
            test[lastRow][lastCol] = '@';
        }else{
            test[lastRow][lastCol]='.';
        }
        flag[row][col] = 1;
        printMap(test);
        if(step(test,N,M,row,col,row-1,col,flag)
                ||step(test,N,M,row,col,row+1,col,flag)
                ||step(test,N,M,row,col,row,col-1,flag)
                ||step(test,N,M,row,col,row,col+1,flag)){
//            System.out.println("找到目标 true");
            return true;
        }else{
            count--;
            flag[row][col] = 0;
            test[lastRow][lastCol]='X';
            if(row == targetRow && col == targetCol){
                test[row][col] = '@';
            }else{
                test[row][col]='.';
            }
            if(box){
                test[nextRow][nextCol] = '.';
                test[row][col] = '*';
            }
            printMap(test);
//            System.out.println("没找到，退回来吧 false");
            return false;
        }
    }

    private static boolean step(char[][] test,int N,int M,int row,int col,int[][] flag){
        if(row<0 || row>=N || col<0 || col>=M || test[row][col] == '#' || flag[row][col] == 1) {return false;};//走到障碍物,或已经走过
        System.out.println("row:"+row+" col:"+col);
        printMap(test);
        count++;
        flag[row][col] = 1;
        if(sum(flag) == N*M)return false;//全部遍历完
        if((row-1 >= 0 && test[row-1][col] == '*')
                ||(row+1 <N && test[row+1][col] == '*')
                ||(col-1 >= 0 && test[row][col-1] == '*')
                ||(col+1 <M && test[row][col+1] == '*')) {
            //推箱子，特殊处理
            if (row - 1 >= 0 && test[row - 1][col] == '*') {//箱子在上侧
                if (row - 2 >= 0) {//可以推动
                    if (test[row - 2][col] == '@') return true; //任务完成
                    else {//推箱子
                        test[row - 1][col] = '.';
                        test[row - 2][col] = '*';
                        if (step(test, N, M, row - 1, col, flag)) {
                            return true;
                        } else {
                            count--;
                            test[row - 2][col] = '.';
                            test[row - 1][col] = '*';
                            flag[row][col] = 0;
                        }
                    }
                } else {//推不动
                    return false;
                }
            } else if (row + 1 < N && test[row + 1][col] == '*') {//箱子在下侧
                if (row + 2 < N) {//可以推动
                    if (test[row + 2][col] == '@') return true; //任务完成
                    else {//推箱子
                        test[row + 1][col] = '.';
                        test[row + 2][col] = '*';
                        if (step(test, N, M, row + 1, col, flag)) {
                            return true;
                        } else {
                            count--;
                            test[row + 2][col] = '.';
                            test[row + 1][col] = '*';
                            flag[row][col] = 0;
                        }
                    }
                } else {//推不动
                    return false;
                }
            } else if (col - 1 >= 0 && test[row][col - 1] == '*') {//箱子在左侧
                if (col - 2 >= 0) {//可以推动
                    if (test[row][col - 2] == '@') return true; //任务完成
                    else {//推箱子
                        test[row][col - 1] = '.';
                        test[row][col - 2] = '*';
                        if (step(test, N, M, row - 1, col, flag)) {
                            return true;
                        } else {
                            count--;
                            test[row][col - 2] = '.';
                            test[row][col - 1] = '*';
                            flag[row][col] = 0;
                        }
                    }
                } else {//推不动
                    return false;
                }
            } else if (col + 1 < M && test[row][col + 1] == '*') {//箱子在左侧
                if (col + 2 < M) {//可以推动
                    if (test[row][col + 2] == '@') return true; //任务完成
                    else {//推箱
                        test[row][col + 1] = '.';
                        test[row][col + 2] = '*';
                        if (step(test, N, M, row - 1, col, flag)) {
                            return true;
                        } else {
                            count--;
                            test[row][col + 2] = '.';
                            test[row][col + 1] = '*';
                            flag[row][col] = 0;
                        }
                    }
                } else {//推不动
                    return false;
                }
            }
        }else{//四周没有箱子。正常递归
            if(step(test,N,M,row-1,col,flag)
                    ||step(test,N,M,row+1,col,flag)
                    ||step(test,N,M,row,col-1,flag)
                    ||step(test,N,M,row,col+1,flag)){
                return true;
            }else{
                count--;
                flag[row][col] = 0;
                return false;
            }
        }
        return false;
    }

    private static void printMap(char[][] test) {
        for(int i=0;i<test.length;i++){
            for(int j=0;j<test[0].length;j++){
                System.out.print(test[i][j]);
            }
            System.out.println();
        }
        System.out.println();
    }

    private static int sum(int[][] flag) {
        int sum = 0;
        for(int i=0;i<flag.length;i++){
            for(int j=0;j<flag[0].length;j++){
                sum +=flag[i][j];
            }
        }
        return sum;
    }
}
